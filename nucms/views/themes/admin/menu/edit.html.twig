{% extends 'base.html.twig' %}

{% block subnav %}

    {% include 'menu/subnav.html.twig' %}

{% endblock %}

{% block body %}

    <div class="container">

        {% include 'menu/toolbar.html.twig' %}

    </div>

    <div class="container">

        <!-- menu items -->
        <div class="row">
            <div class="col-sm-6">

                <div id="menu-items">
                    {% include 'menu/items/index.html.twig' %}
                </div><!--/menu-items-->

            </div>
            <div class="col-sm-6">

                <div class="editBox">

                    <div class="addItemsInputs form-horizontal">
                        {% include 'menu/items/add.html.twig' %}
                    </div>

                    <div class="editItemInputs form-horizontal">
                        {% include 'menu/items/edit.html.twig' %}
                    </div><!--/.editItemInputs-->
                </div>

                <!-- margin -->
                <div class="clearfix baseMargin"></div>

                {{ form_open(current_full_url(), {'id': 'menu-edit-form', 'class': 'form-horizontal', 'novalidate': 'novalidate'}) }}

                <!-- name -->
                <div class="form-group">
                    <div class="col-sm-3 control-label">{{ lang('menu.form.name') }}</div>
                    <div class="col-sm-9">
                        {{ form_input({'name': 'name', 'value': menu.name, 'class': 'form-control', 'id': 'name', 'required': 'required' }) }}
                    </div>
                </div>

                <!-- active -->
                <div class="form-group">
                    <label for="active" class="col-sm-3 control-label">{{ lang('menu.form.active') }}</label>
                    <div class="col-sm-9">
                        <span class="superCheck">
                            <label for="active"></label>
                            {{ form_checkbox({'name': 'active', 'id': 'active'}, 1, menu.active) }}
                            <span></span>
                        </span>
                    </div>
                </div>

                <!-- position -->
                <div class="form-group">
                    <div class="col-sm-3 control-label">{{ lang('menu.form.position') }}</div>
                    <div class="col-sm-9">
                        {{ form_nu_dropdown({'name': 'position', 'required': 'required'}, config.menu.positions, menu.position) | raw }}
                    </div>
                </div>

                <!-- margin -->
                <div class="clearfix baseMargin"></div>

                <!-- buttons -->
                <div class="row">
                    <div class="col-xs-12">
                        <div class="col-xs-12 text-right">
                            <a href="{{ admin_url('menu/delete') }}" rel="{{ menu.id }}" class="btn btn-red btn-margin-left btn-margin-right deleteRecord" data-confirmMsg="{{ lang('menu.text.confirm_delete') }}" data-redirectUrl="{{ admin_url('menu') }}"><i class="ion ion-android-delete tableActions-delete"></i>{{ lang('menu.text.delete') }}</a>
                            <button id="edit-menu-submit" class="btn btn-save" type="button"><i class="ion ion-checkmark"></i>{{ lang('text.save') }}</button>
                        </div>
                    </div>
                </div>

                <input type="hidden" name="nested_order" id="nested_order" value="">
                <input type="hidden" id="menu_items_max_id" value="{{ menu_items_max_id }}">

                {{ form_close() }}

                <!-- margin -->
                <div class="clearfix baseMargin"></div>

            </div>
        </div>

    </div>

{% endblock %}


{% block javascript %}

    {{ parent() }}

    <script src="{{ asset('js/jquery.mjs.nestedSortable.js') }}"></script>
    <script>

        // -- run nested sortable after load
        runNestedSortable('.menu-items', '');

        // -- add menu item
        $(document).on('click', '.menuAdd', function () {

            var type = parseInt($(this).attr('data-menu_type'));
            var dataArray = $('#menu-add-form-' + type).serializeArray();
            var maxId = parseInt($('#menu_items_max_id').val());
            var newId = maxId+1;
            var typeIco = $('#menu-add-form-' + type).find('*[name="type_ico"]').val().toString();

            // Copy item element
            var newItem = $('.menu-items').children('li').last().clone().insertBefore('.menu-items .ghost');
            newItem.find('.menu_item_name').html(dataArray[0].value);

            // Remove data from copy
            var oldData = $(newItem).data(), i;
            var keys = $.map(oldData , function(value, key) { return key; });
            for(i = 0; i < keys.length; i++) {
                newItem.removeAttr("data-" + keys[i]);
            }
            newItem.removeData();

            // Add new data
            newItem.attr('data-id', 0);
            newItem.data('id', newId);
            newItem.attr('id', 'item_'+(maxId+1));
            for (row in dataArray) {
                if (dataArray[row].name.toString() !== 'type_ico') {
                    newItem.attr('data-'+dataArray[row].name, dataArray[row].value);
                    newItem.data(dataArray[row].name, dataArray[row].value);
                }
            }

            // Set new id, icon
            newItem.find('.menuEdit').attr('rel', newId);
            newItem.find('.menuDelete').attr('rel', newId);
            newItem.find('.ico').attr('class', '').addClass(typeIco+' ico');

            // Remove children
            newItem.children('ol').remove();
            newItem.removeClass('ghost');
            newItem.show();
            runNestedSortable('.menu-items', '');

            // Change next id number
            $('#menu_items_max_id').val(newId);

            $('.addItem').hide();
            $('.addButtons').show();

            return false;

        });

        // -- delete menu item
        $(document).on('click', '.menuDelete', function () {

            var itemId = parseInt($(this).attr('rel'));
            $('#item_'+itemId).remove();
            $('#menu-edit-form').append('<input type="hidden" name="menu_items_delete['+itemId+']" value="'+itemId+'">');

            // Get sort
            var oSortable = $('.menu-items').nestedSortable('serialize');
            $('#nested_order').val(oSortable);

        });

        // -- save menu item
        $(document).on('click', '.menuSave', function () {

            var type = parseInt($(this).attr('data-type'));
            var dataArray = $('#menu-edit-form-'+type).serializeArray();
            var idItem = parseInt($('#menu-edit-form-'+type).find('*[name="id"]').val());
            var itemElement = $('#item_'+idItem);

            // Change data value
            for (row in dataArray) {
                console.log(dataArray[row].name+' = '+dataArray[row].value);
                itemElement.attr('data-'+dataArray[row].name, dataArray[row].value);
                itemElement.data(dataArray[row].name, dataArray[row].value);
            }

            // Change name
            itemElement.find('.menu_item_name').html(dataArray[0].value);

            // Close edit inputs
            $('.editItem').hide();
            $('.addButtons').show();

            return false;

        });

        // -- edit menu item
        $(document).on('click', '.menuEdit', function () {

            var itemId = parseInt($(this).attr('rel'));
            var element = $('#item_'+itemId);
            var type = parseInt(element.attr('data-type'));
            var dataElements = [];

            // Insert value from data item
            var data = $(element).data(), i;
            var keys = $.map(data , function(value, key) { return key; });
            for(i = 0; i < keys.length; i++) {

                var value = element.data(keys[i]);
                $('.editItem.type' + type).find('*[name="'+keys[i]+'"]').val(value);

                // Set value for dropdown
                if (keys[i].toString() === 'primary_key') {
                    var selectedValue = $('.editItem.type' + type).find('li[data-value="'+value+'"]').text();
                    $('.editItem.type' + type).find('span[data-name="'+keys[i].toString()+'"]').html(selectedValue);
                }

            }

            // show edit form
            $('.editItem').hide();
            $('.editItem.type' + type).show();
            $('.addButtons').hide();

        });

        // -- show add inputs
        $(document).on('click', '.addButtons button', function () {

            var type = parseInt($(this).attr('data-type'));
            $('.addItem.type' + type).show();
            $('.addButtons').hide();

        });

        // -- close add inputs
        $(document).on('click', '.closeAddItem', function () {

            $('.addItem').hide();
            $('.addButtons').show();

        });

        // -- close edit inputs
        $(document).on('click', '.closeEditItem', function () {

            $('.editItem').hide();
            $('.addButtons').show();

        });

        // -- submit form with all data
        $('#edit-menu-submit').click(function () {

            var dataArray = [];
            $('.menu-items li:not(.ghost)').each(function () {

                jQuery.removeData( this, "nestedSortableItem" );
                var tmpData = $(this).data();
                for (rowData in tmpData) {
                    $('#menu-edit-form').append('<input type="hidden" name="menu_items['+tmpData['id']+']['+rowData+']" value="'+tmpData[rowData]+'">');
                }

            });

            $('#menu-edit-form').submit();

        });

    </script>

{% endblock %}